Parameters:
  Bucket:
    Type: String
    Description: Bucket name where files are stored
  Key:
    Type: String
    Description: Zip file name
    Default: package.zip
  Lambdahandler:
    Type: String
    Description: Name of the python file(lambda handler)
    Default: main
  Email:
    Type: String
    Description: Email Address for Notifications
  MGMTHOSTNAME:
    Type: String
    Description: Address for Management Server
    Default: http://entermanagementipaddress
  USER:
    Type: String
    Description: User for Management Server
    Default: smart_task
  PASSWORD:
    Type: String
    Description: Password for Management Server
    

Resources:
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: TerraformFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'tag:GetResources'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'sns:*'
                Resource: '*'
   
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: !Ref Key
      Handler: !Sub '${Lambdahandler}.lambda_handler'
      Role: !GetAtt LambdaIamRole.Arn
      Runtime: python3.7
      Timeout: 50
      Environment:
        Variables:
          MGMTHOSTNAME: !Ref MGMTHOSTNAME
          USER: !Ref USER
          PASSWORD: !Ref PASSWORD
          SNS_ARN: !Ref SNSTopic


  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt LambdaFunction.Arn       
 
 
  apiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
        Description: Smart Task
        Name: CP_Email_SmartTask
        Parameters:
            endpointConfigurationTypes: REGIONAL
   
  apiGatewayRootMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "ANY"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels: {"application/json": "Empty"}   
      Integration:
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Uri: !Sub
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
            - lambdaArn: !GetAtt "LambdaFunction.Arn"
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: {"application/json": "null"}
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref apiGateway
  
  apiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: apigateway


  FunctionInvokePermissions:
    Type: "AWS::Lambda::Permission"
    DependsOn:    
        - apiGateway
        - LambdaFunction
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaFunction
      Principal: "apigateway.amazonaws.com"
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/*"
        
 
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
      TopicName: Notification
